package com.guangzhou.weiwong.accountbook.mvp.view;

import android.app.Activity;
import android.content.Context;
import android.os.Bundle;
import android.os.Handler;
import android.os.Looper;
import android.support.annotation.Nullable;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;

import com.guangzhou.weiwong.accountbook.R;
import com.guangzhou.weiwong.accountbook.mvp.model.bean.BusData;
import com.guangzhou.weiwong.accountbook.utils.BusProvider;
import com.guangzhou.weiwong.accountbook.utils.Const;
import com.guangzhou.weiwong.accountbook.utils.MyLog;
import com.guangzhou.weiwong.accountbook.utils.TimeUtil;
import com.squareup.otto.Subscribe;

import java.util.ArrayList;
import java.util.List;

import butterknife.Bind;
import butterknife.ButterKnife;
import lecho.lib.hellocharts.gesture.ContainerScrollType;
import lecho.lib.hellocharts.gesture.ZoomType;
import lecho.lib.hellocharts.model.Axis;
import lecho.lib.hellocharts.model.AxisValue;
import lecho.lib.hellocharts.model.Line;
import lecho.lib.hellocharts.model.LineChartData;
import lecho.lib.hellocharts.model.PointValue;
import lecho.lib.hellocharts.model.ValueShape;
import lecho.lib.hellocharts.util.ChartUtils;
import lecho.lib.hellocharts.view.LineChartView;

/**
 *
 * Created by Tower on 2016/5/11.
 */
public class LineChartFragment extends BaseFragment {
    @Bind(R.id.lineChart) LineChartView lineChartView;
    private LineChartData lineChartData;
    private int dateType = Const.DATE_TYPE_DAY;     // 默认单位是天
    private float[] statisticData;

    @Nullable
    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        final View view = inflater.inflate(R.layout.fragment_chart_line, container, false);
        ButterKnife.bind(this, view);

        dateType = ((ChartsActivity)getActivity()).getDataType();
        statisticData = ((ChartsActivity)getActivity()).getDateData();
        lineChartData = generateLineChartData(statisticData.length);
        lineChartView.setLineChartData(lineChartData);
        lineChartView.setZoomType(ZoomType.HORIZONTAL_AND_VERTICAL);
        lineChartView.setContainerScrollEnabled(true, ContainerScrollType.HORIZONTAL);
        lineChartView.setValueSelectionEnabled(true);
        new Handler(Looper.getMainLooper()).postDelayed(new Runnable() {
            @Override
            public void run() {
                prepareDataAnimation();
                lineChartView.startDataAnimation();
            }
        }, 500);
        return view;
    }

    private LineChartData generateLineChartData(int numValues) {
        // Column can have many subcolumns, here by default I use 1 subcolumn in each of 8 columns.
        List<PointValue> values = new ArrayList<>();
        for (int i = 0; i < numValues; ++i) {
            values.add(new PointValue(i, 0));
        }

        Line line = new Line(values);
        line.setColor(ChartUtils.pickColor());
        line.setShape(ValueShape.CIRCLE);
        line.setCubic(true);
        line.setFilled(false);
        line.setHasLabels(false);
        line.setHasLabelsOnlyForSelected(true);
        line.setHasLines(true);
        line.setHasPoints(true);

        List<Line> lines = new ArrayList<>();
        lines.add(line);

        LineChartData data = new LineChartData(lines);
        List<AxisValue> axisValuesX = new ArrayList<>();
        for (int i = 0; i < numValues; i++) {
            switch (dateType) {
                case Const.DATE_TYPE_DAY:
                    axisValuesX.add(new AxisValue(i).setLabel(String.valueOf(1 + i)));
                    break;
                case Const.DATE_TYPE_MONTH:
                    axisValuesX.add(new AxisValue(i).setLabel(TimeUtil.months[i]));
                    break;
                case Const.DATE_TYPE_YEAR:
                    axisValuesX.add(new AxisValue(i).setLabel(String.valueOf(TimeUtil.BEGIN_YEAR + i)));
                    break;
            }
        }
        switch (dateType) {
            case Const.DATE_TYPE_DAY:
                data.setAxisXBottom(new Axis().setName("日期单位：天").setValues(axisValuesX).setAutoGenerated(false));
                break;
            case Const.DATE_TYPE_MONTH:
                data.setAxisXBottom(new Axis().setName("日期单位：月").setValues(axisValuesX).setAutoGenerated(false));
                break;
            case Const.DATE_TYPE_YEAR:
                data.setAxisXBottom(new Axis().setName("日期单位：年").setValues(axisValuesX).setAutoGenerated(false));
                break;
        }
        data.setAxisYLeft(new Axis().setName("金额单位：元").setHasLines(true).setAutoGenerated(true));
        return data;
    }

    private void prepareDataAnimation() {
        for (Line line : lineChartData.getLines()) {
            for (int i = 0; i < line.getValues().size(); i++) {
                PointValue value = line.getValues().get(i);
                // Here I modify target only for Y values but it is OK to modify X targets as well.
                value.setTarget(value.getX(), statisticData[i]);
//                MyLog.i(this, "value: " + statisticData[i]);
            }
        }
    }

    @Subscribe
    public void receiveData(BusData busData) {
        MyLog.i(this, "dateType: " + dateType);
        MyLog.i(this, "receiveData =>> " + busData.toString());
        if (busData.getDataType() != Const.DATA_TYPE_CATE) {
            statisticData = busData.getData();
            if (dateType != busData.getDataType()) {        // 显示单位变了则需重新设置列数
                dateType = busData.getDataType();
                lineChartData = generateLineChartData(statisticData.length);
                lineChartView.setLineChartData(lineChartData);
            } else {
                dateType = busData.getDataType();
            }
            new Handler(Looper.getMainLooper()).postDelayed(new Runnable() {
                @Override
                public void run() {
                    prepareDataAnimation();
                    lineChartView.startDataAnimation();
                }
            }, 500);
        }
    }

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        BusProvider.getBusInstance().register(this);
        MyLog.e(this, "bus: " + BusProvider.getBusInstance());
    }

    @Override
    public void onDestroy() {
        super.onDestroy();
        BusProvider.getBusInstance().unregister(this);
    }
}
